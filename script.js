import axios from "axios";
import {
    Connection,
    PublicKey,
    Keypair,
    Transaction,
    sendAndConfirmTransaction
} from "@solana/web3.js";
import {
    createCreateMetadataAccountV3Instruction
} from "@metaplex-foundation/mpl-token-metadata";

const PINATA_JWT = "Bearer YOUR_PINATA_JWT_TOKEN";  // استبدلها بـ API Key من Pinata
const SOLANA_RPC_URL = "https://api.mainnet-beta.solana.com";  // استخدم "https://api.testnet.solana.com" عند الاختبار

let uploadedImageUrl = "";  // سيتم تحديثه بعد رفع الصورة

// 🔹 رفع صورة التوكن إلى IPFS تلقائيًا
async function uploadToIPFS() {
    const fileInput = document.getElementById("tokenImage");
    const file = fileInput.files[0];

    if (!file) {
        alert("❌ يرجى اختيار صورة أولاً.");
        return;
    }

    document.getElementById("uploadStatus").innerText = "⏳ جاري رفع الصورة إلى IPFS...";

    const formData = new FormData();
    formData.append("file", file);

    try {
        const response = await axios.post("https://api.pinata.cloud/pinning/pinFileToIPFS", formData, {
            headers: {
                "Authorization": PINATA_JWT,
                "Content-Type": "multipart/form-data"
            }
        });

        uploadedImageUrl = `https://ipfs.io/ipfs/${response.data.IpfsHash}`;
        console.log("✅ تم رفع الصورة بنجاح:", uploadedImageUrl);

        document.getElementById("tokenImagePreview").src = uploadedImageUrl;
        document.getElementById("tokenImagePreview").style.display = "block";

        document.getElementById("uploadStatus").innerText = "✅ تم رفع الصورة!";
    } catch (error) {
        console.error("❌ فشل رفع الصورة:", error);
        document.getElementById("uploadStatus").innerText = "❌ فشل رفع الصورة!";
    }
}

// 🔹 إنشاء ملف Metadata ورفعه إلى IPFS تلقائيًا
async function generateMetadata(tokenName, tokenSymbol) {
    if (!uploadedImageUrl) {
        alert("❌ يرجى رفع صورة أولاً.");
        return;
    }

    const metadata = {
        name: tokenName,
        symbol: tokenSymbol,
        description: `This is the official metadata for ${tokenName}.`,
        image: uploadedImageUrl,
        external_url: "https://yourwebsite.com"
    };

    const formData = new FormData();
    const metadataBlob = new Blob([JSON.stringify(metadata)], { type: "application/json" });
    formData.append("file", metadataBlob, "metadata.json");

    try {
        const response = await axios.post("https://api.pinata.cloud/pinning/pinFileToIPFS", formData, {
            headers: {
                "Authorization": PINATA_JWT,
                "Content-Type": "multipart/form-data"
            }
        });

        const metadataUri = `https://ipfs.io/ipfs/${response.data.IpfsHash}`;
        console.log("✅ تم رفع البيانات الوصفية:", metadataUri);

        return metadataUri;
    } catch (error) {
        console.error("❌ فشل رفع البيانات الوصفية:", error);
        return null;
    }
}

// 🔹 تسجيل بيانات التوكن في Metaplex تلقائيًا
async function registerTokenMetadata(mintAddress, metadataUri, ownerPrivateKey) {
    const connection = new Connection(SOLANA_RPC_URL);
    const owner = Keypair.fromSecretKey(Uint8Array.from(ownerPrivateKey));

    const metadataProgramId = new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");
    const mint = new PublicKey(mintAddress);

    const [metadataAccount] = await PublicKey.findProgramAddress(
        [
            Buffer.from("metadata"),
            metadataProgramId.toBuffer(),
            mint.toBuffer(),
        ],
        metadataProgramId
    );

    const transaction = new Transaction().add(
        createCreateMetadataAccountV3Instruction(
            {
                metadata: metadataAccount,
                mint,
                mintAuthority: owner.publicKey,
                payer: owner.publicKey,
                updateAuthority: owner.publicKey,
            },
            {
                createMetadataAccountArgsV3: {
                    data: {
                        name: "AutoGeneratedToken",
                        symbol: "AUTO",
                        uri: metadataUri,
                        sellerFeeBasisPoints: 0,
                        creators: null,
                        collection: null,
                        uses: null
                    },
                    isMutable: true
                }
            }
        )
    );

    await sendAndConfirmTransaction(connection, transaction, [owner]);
    console.log("✅ تم تسجيل بيانات التوكن على Metaplex بنجاح!");
}

// 🔹 إنشاء التوكن وربطه بـ Metadata تلقائيًا
async function createToken() {
    const tokenName = document.getElementById("tokenName").value;
    const tokenSymbol = document.getElementById("tokenSymbol").value;

    if (!tokenName || !tokenSymbol) {
        alert("❌ يرجى إدخال اسم التوكن ورمزه!");
        return;
    }

    document.getElementById("uploadStatus").innerText = "🔄 جاري إنشاء التوكن...";
    
    // 1️⃣ رفع بيانات التوكن إلى IPFS
    const metadataUri = await generateMetadata(tokenName, tokenSymbol);
    if (!metadataUri) return;

    // 2️⃣ إنشاء التوكن (يجب أن يكون لديك وظيفة لإنشاء التوكن وإرجاع Mint Address)
    const mintAddress = "YOUR_MINT_ADDRESS";  // استبدلها بمنطق إنشاء التوكن

    // 3️⃣ تسجيل البيانات على Metaplex
    await registerTokenMetadata(mintAddress, metadataUri, "YOUR_PRIVATE_KEY");

    document.getElementById("uploadStatus").innerText = "✅ تم إنشاء التوكن بنجاح!";
}

// 🛠️ ربط الوظائف بـ `window` حتى تعمل عند استدعائها من HTML
window.uploadToIPFS = uploadToIPFS;
window.createToken = createToken;
